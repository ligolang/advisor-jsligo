#import "../../src/advisor/main.jsligo" "ADVISOR"
#import "../../test/ligo/indice_no_view.jsligo" "DUMMY"
#import "indice_no_view.jsligo" "DUMMY"

const assert_string_failure = (res: test_exec_result, expected: string) : unit => {
  let expected_ = Test.eval (expected) ;
  match (res) {
    when(Fail(x)) : (
      match (x) {
        when(Rejected(x)) :
          assert (Test.michelson_equal (x[0], expected_));
        when(Balance_too_low(_)) :  
          failwith("contract failed: balance too low");
        when(Other(s)) : 
          failwith(s);
      });
    when(Success(_)) : failwith ("bad price check");
  };
};

const test = do {

  // deploy INDICE contract 
  const indice_initial_storage : int = 4;
  const indice_contract_path = "../../test/ligo/indice_no_view.jsligo";
  Test.log("deploy DUMMY smart contract");
  let res = Test.originate_from_file (indice_contract_path, indice_initial_storage, (0 as mutez));
  const indice_address = res.addr;

  // INDICE Increment(1)
  Test.log("call Increment entrypoint of DUMMY smart contract");
    let _x = Test.transfer_exn(indice_address, (Increment(1) as parameter_of DUMMY), (0 as mutez));
    const inc_actual_storage = Test.get_storage(indice_address);
    Test.log(inc_actual_storage);
    assert(inc_actual_storage == indice_initial_storage + 1);

  // INDICE Decrement(2)
  Test.log("call Decrement entrypoint of DUMMY smart contract");
    let _y = Test.transfer_exn(indice_address, (Decrement(2) as parameter_of DUMMY), (0 as mutez));
    const dec_actual_storage = Test.get_storage(indice_address);
    Test.log(dec_actual_storage);
    assert(dec_actual_storage == inc_actual_storage - 2);

  // deploy ADVISOR contract 
  Test.log("deploy ADVISOR smart contract");
  const advisor_initial_storage : ADVISOR.storage = {
    indiceAddress:Test.to_address(indice_address),
    algorithm:((i : int) => { if (i < 10) { return true } else { return false } }),
    result: false,
    metadata: (Big_map.empty as big_map<string, bytes>)
  };
  const advisor_contract_path = "../../src/advisor/main.jsligo"; //"views_hangzhou/jsligo/advisor.jsligo";
  let advisor_res = Test.originate_from_file(advisor_contract_path, advisor_initial_storage, (0 as mutez));
  const advisor_address = advisor_res.addr;

  // ADVISOR call ExecuteAlgorithm
  Test.log("call ExecuteAlgorithm entrypoint of ADVISOR smart contract (should fail because DUMMY has no view)");
  {
    const result : test_exec_result = Test.transfer(advisor_address, (ExecuteAlgorithm(unit) as parameter_of ADVISOR), (0 as mutez));
    assert_string_failure(result, "View indice_value not found");
    const advisor_modified_storage = Test.get_storage(advisor_address);
    Test.log(advisor_modified_storage);
    assert(advisor_modified_storage.result == advisor_initial_storage.result);
  };
};