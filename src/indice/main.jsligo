export namespace Storage {
    export type t = int;    
};

export namespace Parameter {
    export type t = ["Increment", int] | ["Decrement", int];
};

export type storage = Storage.t;
export type parameter = Parameter.t;
export type return_ = [list<operation>, storage];


export const increment = (param: int, store: storage) : return_ => {
    return [list([]) as list<operation>, store + param]
};

export const decrement = (param: int, store: storage) : return_ => {
    return [list([]) as list<operation>, store - param]
};

@entry
const indiceMain = (ep : parameter, store : storage) : return_ => {
    return match (ep) {
        when (Increment (p)): increment(p, store);
        when (Decrement (p)): decrement(p, store)
    };
};

// @view 
const indice_value = ([_params, store] : [unit, storage]) : int => { return store };
